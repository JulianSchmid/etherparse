use super::super::*;

extern crate byteorder;
use self::byteorder::{ByteOrder, BigEndian, WriteBytesExt};

///IPv6 fragment header.
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct Ipv6FragmentHeader {
    /// Type of content after this header (protocol number)
    pub next_header: u8,
    /// Offset in 8 octets
    ///
    /// Note: In the header only 13 bits are used, so the allowed range
    /// of the value is between 0 and 0x1FFF (inclusive).
    pub fragment_offset: u16,
    /// True if more fragment packets will follow. False if this is the last packet.
    pub more_fragments: bool,
    /// Identifcation value generated by the source.
    pub identification: u32
}

impl Ipv6FragmentHeader {
    /// Create a new fragmentation header with the given parameters.
    ///
    /// Note that the `fragment_offset` can only support values between 0 and 0x1fff (inclusive).
    pub fn new(next_header: u8, fragment_offset: u16, more_fragments: bool, identification: u32) -> Ipv6FragmentHeader {
        Ipv6FragmentHeader{
            next_header,
            fragment_offset,
            more_fragments,
            identification
        }
    }

    /// Read an Ipv6FragmentHeader from a slice and return the header & unused parts of the slice.
    pub fn read_from_slice<'a>(slice: &'a [u8]) -> Result<(Ipv6FragmentHeader, &'a[u8]), ReadError> {
        let s = Ipv6FragmentHeaderSlice::from_slice(slice)?;
        let rest = &slice[8..];
        let header = s.to_header();
        Ok((
            header, 
            rest
        ))
    }

    /// Writes a given IPv6 fragment header to the current position.
    pub fn write<T: io::Write + Sized>(&self, writer: &mut T) -> Result<(), WriteError> {
        use ErrorField::*;

        max_check_u16(
            self.fragment_offset,
            0b0001_1111_1111_1111u16,
            Ipv6FragmentOffset
        )?;

        writer.write_u8(self.next_header)?;
        writer.write_u8(0)?;
        // offset (13bit big endian) & more fragments
        {
            let mut buf = [0; 2];
            BigEndian::write_u16(&mut buf, self.fragment_offset);
            
            writer.write_u8(
                ((buf[0] << 3) & 0b1111_1000u8) |
                ((buf[1] >> 5) & 0b0000_0111u8)
            )?;

            writer.write_u8(
                (buf[1] & 0b0001_1111u8) |
                if self.more_fragments {
                    0b1000_0000u8
                } else {
                    0
                }
            )?;
            
        }
        writer.write_u32::<BigEndian>(self.identification)?;
        Ok(())
    }

}

/// Slice containing an IPv6 fragment header.
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct Ipv6FragmentHeaderSlice<'a> {
    /// Slice containing the packet data.
    slice: &'a [u8]
}

impl<'a> Ipv6FragmentHeaderSlice<'a> {

    /// Creates a hop by hop header slice from a slice.
    pub fn from_slice(slice: &'a[u8]) -> Result<Ipv6FragmentHeaderSlice<'a>, ReadError> {
        // the fragmentation header has the exact size of 8 bytes
        use crate::ReadError::*;
        if slice.len() < 8 {
            Err(UnexpectedEndOfSlice(8))
        } else {
            Ok(Ipv6FragmentHeaderSlice {
                slice: &slice[..8]
            })
        }
    }

    /// Returns the slice containing the ipv6 extension header
    #[inline]
    pub fn slice(&self) -> &'a[u8] {
        self.slice
    }

    /// Returns the id of the next header (see IpTrafficClass for a definition of all ids).
    pub fn next_header(&self) -> u8 {
        self.slice[0]
    }

    /// Fragment offset in 8 octets.
    ///
    /// Note: In the header only 13 bits are used, so the allowed range
    /// of the value is between 0 and 0x1FFF (inclusive).
    pub fn fragment_offset(&self) -> u16 {
        BigEndian::read_u16(&[
            (self.slice[2] >> 3) & 0b0001_1111u8,
            ((self.slice[2] << 5) & 0b1110_0000u8) |
            (self.slice[3] & 0b0001_1111u8)
        ])
    }

    /// True if more fragment packets will follow. False if this is the last packet.
    pub fn more_fragments(&self) -> bool {
        0 != self.slice[3] & 0b1000_0000u8
    }

    /// Identifcation value generated by the source 
    pub fn identification(&self) -> u32 {
        BigEndian::read_u32(&self.slice[4..8])
    }

    /// Decode some of the fields and copy the results to a 
    /// Ipv6FragmentHeader struct.
    pub fn to_header(&self) -> Ipv6FragmentHeader {
        Ipv6FragmentHeader{
            next_header: self.next_header(),
            fragment_offset: self.fragment_offset(),
            more_fragments: self.more_fragments(),
            identification: self.identification()
        }
    }
}
